// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/05/2017 22:30:20"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    g58_comp_player
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module g58_comp_player_vlg_sample_tst(
	clk,
	new_card,
	play_pile_top_card,
	push_card,
	rst,
	turn,
	sampler_tx
);
input  clk;
input [5:0] new_card;
input [5:0] play_pile_top_card;
input  push_card;
input  rst;
input  turn;
output sampler_tx;

reg sample;
time current_time;
always @(clk or new_card or play_pile_top_card or push_card or rst or turn)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module g58_comp_player_vlg_check_tst (
	current_card,
	done,
	draw_enable,
	legal_play,
	num_cards,
	scan_enable,
	scan_index,
	scan_next,
	stack_mode,
	sampler_rx
);
input [5:0] current_card;
input  done;
input  draw_enable;
input  legal_play;
input [5:0] num_cards;
input  scan_enable;
input [5:0] scan_index;
input  scan_next;
input [1:0] stack_mode;
input sampler_rx;

reg [5:0] current_card_expected;
reg  done_expected;
reg  draw_enable_expected;
reg  legal_play_expected;
reg [5:0] num_cards_expected;
reg  scan_enable_expected;
reg [5:0] scan_index_expected;
reg  scan_next_expected;
reg [1:0] stack_mode_expected;

reg [5:0] current_card_prev;
reg  done_prev;
reg  draw_enable_prev;
reg  legal_play_prev;
reg [5:0] num_cards_prev;
reg  scan_enable_prev;
reg [5:0] scan_index_prev;
reg  scan_next_prev;
reg [1:0] stack_mode_prev;

reg [5:0] current_card_expected_prev;
reg  done_expected_prev;
reg  draw_enable_expected_prev;
reg  legal_play_expected_prev;
reg [5:0] num_cards_expected_prev;
reg  scan_enable_expected_prev;
reg [5:0] scan_index_expected_prev;
reg  scan_next_expected_prev;
reg [1:0] stack_mode_expected_prev;

reg [5:0] last_current_card_exp;
reg  last_done_exp;
reg  last_draw_enable_exp;
reg  last_legal_play_exp;
reg [5:0] last_num_cards_exp;
reg  last_scan_enable_exp;
reg [5:0] last_scan_index_exp;
reg  last_scan_next_exp;
reg [1:0] last_stack_mode_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:9] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 9'b1;
end

// update real /o prevs

always @(trigger)
begin
	current_card_prev = current_card;
	done_prev = done;
	draw_enable_prev = draw_enable;
	legal_play_prev = legal_play;
	num_cards_prev = num_cards;
	scan_enable_prev = scan_enable;
	scan_index_prev = scan_index;
	scan_next_prev = scan_next;
	stack_mode_prev = stack_mode;
end

// update expected /o prevs

always @(trigger)
begin
	current_card_expected_prev = current_card_expected;
	done_expected_prev = done_expected;
	draw_enable_expected_prev = draw_enable_expected;
	legal_play_expected_prev = legal_play_expected;
	num_cards_expected_prev = num_cards_expected;
	scan_enable_expected_prev = scan_enable_expected;
	scan_index_expected_prev = scan_index_expected;
	scan_next_expected_prev = scan_next_expected;
	stack_mode_expected_prev = stack_mode_expected;
end



// expected draw_enable
initial
begin
	draw_enable_expected = 1'bX;
end 

// expected scan_enable
initial
begin
	scan_enable_expected = 1'bX;
end 
// expected current_card[ 5 ]
initial
begin
	current_card_expected[5] = 1'bX;
end 
// expected current_card[ 4 ]
initial
begin
	current_card_expected[4] = 1'bX;
end 
// expected current_card[ 3 ]
initial
begin
	current_card_expected[3] = 1'bX;
end 
// expected current_card[ 2 ]
initial
begin
	current_card_expected[2] = 1'bX;
end 
// expected current_card[ 1 ]
initial
begin
	current_card_expected[1] = 1'bX;
end 
// expected current_card[ 0 ]
initial
begin
	current_card_expected[0] = 1'bX;
end 
// expected num_cards[ 5 ]
initial
begin
	num_cards_expected[5] = 1'bX;
end 
// expected num_cards[ 4 ]
initial
begin
	num_cards_expected[4] = 1'bX;
end 
// expected num_cards[ 3 ]
initial
begin
	num_cards_expected[3] = 1'bX;
end 
// expected num_cards[ 2 ]
initial
begin
	num_cards_expected[2] = 1'bX;
end 
// expected num_cards[ 1 ]
initial
begin
	num_cards_expected[1] = 1'bX;
end 
// expected num_cards[ 0 ]
initial
begin
	num_cards_expected[0] = 1'bX;
end 
// expected scan_index[ 5 ]
initial
begin
	scan_index_expected[5] = 1'bX;
end 
// expected scan_index[ 4 ]
initial
begin
	scan_index_expected[4] = 1'bX;
end 
// expected scan_index[ 3 ]
initial
begin
	scan_index_expected[3] = 1'bX;
end 
// expected scan_index[ 2 ]
initial
begin
	scan_index_expected[2] = 1'bX;
end 
// expected scan_index[ 1 ]
initial
begin
	scan_index_expected[1] = 1'bX;
end 
// expected scan_index[ 0 ]
initial
begin
	scan_index_expected[0] = 1'bX;
end 
// expected stack_mode[ 1 ]
initial
begin
	stack_mode_expected[1] = 1'bX;
end 
// expected stack_mode[ 0 ]
initial
begin
	stack_mode_expected[0] = 1'bX;
end 

// expected legal_play
initial
begin
	legal_play_expected = 1'bX;
end 

// expected scan_next
initial
begin
	scan_next_expected = 1'bX;
end 

// expected done
initial
begin
	done_expected = 1'bX;
end 
// generate trigger
always @(current_card_expected or current_card or done_expected or done or draw_enable_expected or draw_enable or legal_play_expected or legal_play or num_cards_expected or num_cards or scan_enable_expected or scan_enable or scan_index_expected or scan_index or scan_next_expected or scan_next or stack_mode_expected or stack_mode)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected current_card = %b | expected done = %b | expected draw_enable = %b | expected legal_play = %b | expected num_cards = %b | expected scan_enable = %b | expected scan_index = %b | expected scan_next = %b | expected stack_mode = %b | ",current_card_expected_prev,done_expected_prev,draw_enable_expected_prev,legal_play_expected_prev,num_cards_expected_prev,scan_enable_expected_prev,scan_index_expected_prev,scan_next_expected_prev,stack_mode_expected_prev);
	$display("| real current_card = %b | real done = %b | real draw_enable = %b | real legal_play = %b | real num_cards = %b | real scan_enable = %b | real scan_index = %b | real scan_next = %b | real stack_mode = %b | ",current_card_prev,done_prev,draw_enable_prev,legal_play_prev,num_cards_prev,scan_enable_prev,scan_index_prev,scan_next_prev,stack_mode_prev);
`endif
	if (
		( current_card_expected_prev[0] !== 1'bx ) && ( current_card_prev[0] !== current_card_expected_prev[0] )
		&& ((current_card_expected_prev[0] !== last_current_card_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port current_card[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", current_card_expected_prev);
		$display ("     Real value = %b", current_card_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_current_card_exp[0] = current_card_expected_prev[0];
	end
	if (
		( current_card_expected_prev[1] !== 1'bx ) && ( current_card_prev[1] !== current_card_expected_prev[1] )
		&& ((current_card_expected_prev[1] !== last_current_card_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port current_card[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", current_card_expected_prev);
		$display ("     Real value = %b", current_card_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_current_card_exp[1] = current_card_expected_prev[1];
	end
	if (
		( current_card_expected_prev[2] !== 1'bx ) && ( current_card_prev[2] !== current_card_expected_prev[2] )
		&& ((current_card_expected_prev[2] !== last_current_card_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port current_card[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", current_card_expected_prev);
		$display ("     Real value = %b", current_card_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_current_card_exp[2] = current_card_expected_prev[2];
	end
	if (
		( current_card_expected_prev[3] !== 1'bx ) && ( current_card_prev[3] !== current_card_expected_prev[3] )
		&& ((current_card_expected_prev[3] !== last_current_card_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port current_card[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", current_card_expected_prev);
		$display ("     Real value = %b", current_card_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_current_card_exp[3] = current_card_expected_prev[3];
	end
	if (
		( current_card_expected_prev[4] !== 1'bx ) && ( current_card_prev[4] !== current_card_expected_prev[4] )
		&& ((current_card_expected_prev[4] !== last_current_card_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port current_card[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", current_card_expected_prev);
		$display ("     Real value = %b", current_card_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_current_card_exp[4] = current_card_expected_prev[4];
	end
	if (
		( current_card_expected_prev[5] !== 1'bx ) && ( current_card_prev[5] !== current_card_expected_prev[5] )
		&& ((current_card_expected_prev[5] !== last_current_card_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port current_card[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", current_card_expected_prev);
		$display ("     Real value = %b", current_card_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_current_card_exp[5] = current_card_expected_prev[5];
	end
	if (
		( done_expected_prev !== 1'bx ) && ( done_prev !== done_expected_prev )
		&& ((done_expected_prev !== last_done_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port done :: @time = %t",  $realtime);
		$display ("     Expected value = %b", done_expected_prev);
		$display ("     Real value = %b", done_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_done_exp = done_expected_prev;
	end
	if (
		( draw_enable_expected_prev !== 1'bx ) && ( draw_enable_prev !== draw_enable_expected_prev )
		&& ((draw_enable_expected_prev !== last_draw_enable_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port draw_enable :: @time = %t",  $realtime);
		$display ("     Expected value = %b", draw_enable_expected_prev);
		$display ("     Real value = %b", draw_enable_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_draw_enable_exp = draw_enable_expected_prev;
	end
	if (
		( legal_play_expected_prev !== 1'bx ) && ( legal_play_prev !== legal_play_expected_prev )
		&& ((legal_play_expected_prev !== last_legal_play_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port legal_play :: @time = %t",  $realtime);
		$display ("     Expected value = %b", legal_play_expected_prev);
		$display ("     Real value = %b", legal_play_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_legal_play_exp = legal_play_expected_prev;
	end
	if (
		( num_cards_expected_prev[0] !== 1'bx ) && ( num_cards_prev[0] !== num_cards_expected_prev[0] )
		&& ((num_cards_expected_prev[0] !== last_num_cards_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port num_cards[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", num_cards_expected_prev);
		$display ("     Real value = %b", num_cards_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_num_cards_exp[0] = num_cards_expected_prev[0];
	end
	if (
		( num_cards_expected_prev[1] !== 1'bx ) && ( num_cards_prev[1] !== num_cards_expected_prev[1] )
		&& ((num_cards_expected_prev[1] !== last_num_cards_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port num_cards[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", num_cards_expected_prev);
		$display ("     Real value = %b", num_cards_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_num_cards_exp[1] = num_cards_expected_prev[1];
	end
	if (
		( num_cards_expected_prev[2] !== 1'bx ) && ( num_cards_prev[2] !== num_cards_expected_prev[2] )
		&& ((num_cards_expected_prev[2] !== last_num_cards_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port num_cards[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", num_cards_expected_prev);
		$display ("     Real value = %b", num_cards_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_num_cards_exp[2] = num_cards_expected_prev[2];
	end
	if (
		( num_cards_expected_prev[3] !== 1'bx ) && ( num_cards_prev[3] !== num_cards_expected_prev[3] )
		&& ((num_cards_expected_prev[3] !== last_num_cards_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port num_cards[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", num_cards_expected_prev);
		$display ("     Real value = %b", num_cards_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_num_cards_exp[3] = num_cards_expected_prev[3];
	end
	if (
		( num_cards_expected_prev[4] !== 1'bx ) && ( num_cards_prev[4] !== num_cards_expected_prev[4] )
		&& ((num_cards_expected_prev[4] !== last_num_cards_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port num_cards[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", num_cards_expected_prev);
		$display ("     Real value = %b", num_cards_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_num_cards_exp[4] = num_cards_expected_prev[4];
	end
	if (
		( num_cards_expected_prev[5] !== 1'bx ) && ( num_cards_prev[5] !== num_cards_expected_prev[5] )
		&& ((num_cards_expected_prev[5] !== last_num_cards_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port num_cards[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", num_cards_expected_prev);
		$display ("     Real value = %b", num_cards_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_num_cards_exp[5] = num_cards_expected_prev[5];
	end
	if (
		( scan_enable_expected_prev !== 1'bx ) && ( scan_enable_prev !== scan_enable_expected_prev )
		&& ((scan_enable_expected_prev !== last_scan_enable_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port scan_enable :: @time = %t",  $realtime);
		$display ("     Expected value = %b", scan_enable_expected_prev);
		$display ("     Real value = %b", scan_enable_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_scan_enable_exp = scan_enable_expected_prev;
	end
	if (
		( scan_index_expected_prev[0] !== 1'bx ) && ( scan_index_prev[0] !== scan_index_expected_prev[0] )
		&& ((scan_index_expected_prev[0] !== last_scan_index_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port scan_index[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", scan_index_expected_prev);
		$display ("     Real value = %b", scan_index_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_scan_index_exp[0] = scan_index_expected_prev[0];
	end
	if (
		( scan_index_expected_prev[1] !== 1'bx ) && ( scan_index_prev[1] !== scan_index_expected_prev[1] )
		&& ((scan_index_expected_prev[1] !== last_scan_index_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port scan_index[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", scan_index_expected_prev);
		$display ("     Real value = %b", scan_index_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_scan_index_exp[1] = scan_index_expected_prev[1];
	end
	if (
		( scan_index_expected_prev[2] !== 1'bx ) && ( scan_index_prev[2] !== scan_index_expected_prev[2] )
		&& ((scan_index_expected_prev[2] !== last_scan_index_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port scan_index[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", scan_index_expected_prev);
		$display ("     Real value = %b", scan_index_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_scan_index_exp[2] = scan_index_expected_prev[2];
	end
	if (
		( scan_index_expected_prev[3] !== 1'bx ) && ( scan_index_prev[3] !== scan_index_expected_prev[3] )
		&& ((scan_index_expected_prev[3] !== last_scan_index_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port scan_index[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", scan_index_expected_prev);
		$display ("     Real value = %b", scan_index_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_scan_index_exp[3] = scan_index_expected_prev[3];
	end
	if (
		( scan_index_expected_prev[4] !== 1'bx ) && ( scan_index_prev[4] !== scan_index_expected_prev[4] )
		&& ((scan_index_expected_prev[4] !== last_scan_index_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port scan_index[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", scan_index_expected_prev);
		$display ("     Real value = %b", scan_index_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_scan_index_exp[4] = scan_index_expected_prev[4];
	end
	if (
		( scan_index_expected_prev[5] !== 1'bx ) && ( scan_index_prev[5] !== scan_index_expected_prev[5] )
		&& ((scan_index_expected_prev[5] !== last_scan_index_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port scan_index[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", scan_index_expected_prev);
		$display ("     Real value = %b", scan_index_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_scan_index_exp[5] = scan_index_expected_prev[5];
	end
	if (
		( scan_next_expected_prev !== 1'bx ) && ( scan_next_prev !== scan_next_expected_prev )
		&& ((scan_next_expected_prev !== last_scan_next_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port scan_next :: @time = %t",  $realtime);
		$display ("     Expected value = %b", scan_next_expected_prev);
		$display ("     Real value = %b", scan_next_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_scan_next_exp = scan_next_expected_prev;
	end
	if (
		( stack_mode_expected_prev[0] !== 1'bx ) && ( stack_mode_prev[0] !== stack_mode_expected_prev[0] )
		&& ((stack_mode_expected_prev[0] !== last_stack_mode_exp[0]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port stack_mode[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", stack_mode_expected_prev);
		$display ("     Real value = %b", stack_mode_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_stack_mode_exp[0] = stack_mode_expected_prev[0];
	end
	if (
		( stack_mode_expected_prev[1] !== 1'bx ) && ( stack_mode_prev[1] !== stack_mode_expected_prev[1] )
		&& ((stack_mode_expected_prev[1] !== last_stack_mode_exp[1]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port stack_mode[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", stack_mode_expected_prev);
		$display ("     Real value = %b", stack_mode_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_stack_mode_exp[1] = stack_mode_expected_prev[1];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#400000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module g58_comp_player_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [5:0] new_card;
reg [5:0] play_pile_top_card;
reg push_card;
reg rst;
reg turn;
// wires                                               
wire [5:0] current_card;
wire done;
wire draw_enable;
wire legal_play;
wire [5:0] num_cards;
wire scan_enable;
wire [5:0] scan_index;
wire scan_next;
wire [1:0] stack_mode;

wire sampler;                             

// assign statements (if any)                          
g58_comp_player i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.current_card(current_card),
	.done(done),
	.draw_enable(draw_enable),
	.legal_play(legal_play),
	.new_card(new_card),
	.num_cards(num_cards),
	.play_pile_top_card(play_pile_top_card),
	.push_card(push_card),
	.rst(rst),
	.scan_enable(scan_enable),
	.scan_index(scan_index),
	.scan_next(scan_next),
	.stack_mode(stack_mode),
	.turn(turn)
);

// rst
initial
begin
	rst = 1'b0;
	rst = #20000 1'b1;
	rst = #20000 1'b0;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

// push_card
initial
begin
	push_card = 1'b0;
	push_card = #60000 1'b1;
	push_card = #20000 1'b0;
	push_card = #20000 1'b1;
	push_card = #20000 1'b0;
	push_card = #20000 1'b1;
	push_card = #20000 1'b0;
end 

// turn
initial
begin
	turn = 1'b0;
	turn = #180000 1'b1;
	turn = #110000 1'b0;
end 
// new_card[ 5 ]
initial
begin
	new_card[5] = 1'b0;
end 
// new_card[ 4 ]
initial
begin
	new_card[4] = 1'b0;
	new_card[4] = #60000 1'b1;
	new_card[4] = #80000 1'b0;
	new_card[4] = #40000 1'b1;
	new_card[4] = #40000 1'b0;
end 
// new_card[ 3 ]
initial
begin
	new_card[3] = 1'b0;
	new_card[3] = #60000 1'b1;
	new_card[3] = #40000 1'b0;
end 
// new_card[ 2 ]
initial
begin
	new_card[2] = 1'b0;
	new_card[2] = #180000 1'b1;
	new_card[2] = #40000 1'b0;
end 
// new_card[ 1 ]
initial
begin
	new_card[1] = 1'b0;
	new_card[1] = #140000 1'b1;
	new_card[1] = #40000 1'b0;
end 
// new_card[ 0 ]
initial
begin
	new_card[0] = 1'b0;
end 
// play_pile_top_card[ 5 ]
initial
begin
	play_pile_top_card[5] = 1'b0;
end 
// play_pile_top_card[ 4 ]
initial
begin
	play_pile_top_card[4] = 1'b1;
end 
// play_pile_top_card[ 3 ]
initial
begin
	play_pile_top_card[3] = 1'b0;
end 
// play_pile_top_card[ 2 ]
initial
begin
	play_pile_top_card[2] = 1'b0;
end 
// play_pile_top_card[ 1 ]
initial
begin
	play_pile_top_card[1] = 1'b0;
end 
// play_pile_top_card[ 0 ]
initial
begin
	play_pile_top_card[0] = 1'b0;
end 

g58_comp_player_vlg_sample_tst tb_sample (
	.clk(clk),
	.new_card(new_card),
	.play_pile_top_card(play_pile_top_card),
	.push_card(push_card),
	.rst(rst),
	.turn(turn),
	.sampler_tx(sampler)
);

g58_comp_player_vlg_check_tst tb_out(
	.current_card(current_card),
	.done(done),
	.draw_enable(draw_enable),
	.legal_play(legal_play),
	.num_cards(num_cards),
	.scan_enable(scan_enable),
	.scan_index(scan_index),
	.scan_next(scan_next),
	.stack_mode(stack_mode),
	.sampler_rx(sampler)
);
endmodule

