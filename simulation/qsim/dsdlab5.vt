// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/31/2017 15:57:35"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    g58_sys_ctrl_fsm_test
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module g58_sys_ctrl_fsm_test_vlg_sample_tst(
	clk,
	comp_done,
	num_cards_comp,
	num_cards_deck,
	num_cards_player,
	player_done,
	rst,
	sampler_tx
);
input  clk;
input  comp_done;
input [5:0] num_cards_comp;
input [5:0] num_cards_deck;
input [5:0] num_cards_player;
input  player_done;
input  rst;
output sampler_tx;

reg sample;
time current_time;
always @(clk or comp_done or num_cards_comp or num_cards_deck or num_cards_player or player_done or rst)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module g58_sys_ctrl_fsm_test_vlg_check_tst (
	comp_turn,
	comp_won,
	deal_comp,
	deal_player,
	player_turn,
	player_won,
	tie,
	sampler_rx
);
input  comp_turn;
input  comp_won;
input  deal_comp;
input  deal_player;
input  player_turn;
input  player_won;
input  tie;
input sampler_rx;

reg  comp_turn_expected;
reg  comp_won_expected;
reg  deal_comp_expected;
reg  deal_player_expected;
reg  player_turn_expected;
reg  player_won_expected;
reg  tie_expected;

reg  comp_turn_prev;
reg  comp_won_prev;
reg  deal_comp_prev;
reg  deal_player_prev;
reg  player_turn_prev;
reg  player_won_prev;
reg  tie_prev;

reg  comp_turn_expected_prev;
reg  comp_won_expected_prev;
reg  deal_comp_expected_prev;
reg  deal_player_expected_prev;
reg  player_turn_expected_prev;
reg  player_won_expected_prev;
reg  tie_expected_prev;

reg  last_comp_turn_exp;
reg  last_comp_won_exp;
reg  last_deal_comp_exp;
reg  last_deal_player_exp;
reg  last_player_turn_exp;
reg  last_player_won_exp;
reg  last_tie_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:7] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 7'b1;
end

// update real /o prevs

always @(trigger)
begin
	comp_turn_prev = comp_turn;
	comp_won_prev = comp_won;
	deal_comp_prev = deal_comp;
	deal_player_prev = deal_player;
	player_turn_prev = player_turn;
	player_won_prev = player_won;
	tie_prev = tie;
end

// update expected /o prevs

always @(trigger)
begin
	comp_turn_expected_prev = comp_turn_expected;
	comp_won_expected_prev = comp_won_expected;
	deal_comp_expected_prev = deal_comp_expected;
	deal_player_expected_prev = deal_player_expected;
	player_turn_expected_prev = player_turn_expected;
	player_won_expected_prev = player_won_expected;
	tie_expected_prev = tie_expected;
end



// expected deal_player
initial
begin
	deal_player_expected = 1'bX;
end 

// expected deal_comp
initial
begin
	deal_comp_expected = 1'bX;
end 

// expected player_turn
initial
begin
	player_turn_expected = 1'bX;
end 

// expected comp_turn
initial
begin
	comp_turn_expected = 1'bX;
end 

// expected player_won
initial
begin
	player_won_expected = 1'bX;
end 

// expected comp_won
initial
begin
	comp_won_expected = 1'bX;
end 

// expected tie
initial
begin
	tie_expected = 1'bX;
end 
// generate trigger
always @(comp_turn_expected or comp_turn or comp_won_expected or comp_won or deal_comp_expected or deal_comp or deal_player_expected or deal_player or player_turn_expected or player_turn or player_won_expected or player_won or tie_expected or tie)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected comp_turn = %b | expected comp_won = %b | expected deal_comp = %b | expected deal_player = %b | expected player_turn = %b | expected player_won = %b | expected tie = %b | ",comp_turn_expected_prev,comp_won_expected_prev,deal_comp_expected_prev,deal_player_expected_prev,player_turn_expected_prev,player_won_expected_prev,tie_expected_prev);
	$display("| real comp_turn = %b | real comp_won = %b | real deal_comp = %b | real deal_player = %b | real player_turn = %b | real player_won = %b | real tie = %b | ",comp_turn_prev,comp_won_prev,deal_comp_prev,deal_player_prev,player_turn_prev,player_won_prev,tie_prev);
`endif
	if (
		( comp_turn_expected_prev !== 1'bx ) && ( comp_turn_prev !== comp_turn_expected_prev )
		&& ((comp_turn_expected_prev !== last_comp_turn_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port comp_turn :: @time = %t",  $realtime);
		$display ("     Expected value = %b", comp_turn_expected_prev);
		$display ("     Real value = %b", comp_turn_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_comp_turn_exp = comp_turn_expected_prev;
	end
	if (
		( comp_won_expected_prev !== 1'bx ) && ( comp_won_prev !== comp_won_expected_prev )
		&& ((comp_won_expected_prev !== last_comp_won_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port comp_won :: @time = %t",  $realtime);
		$display ("     Expected value = %b", comp_won_expected_prev);
		$display ("     Real value = %b", comp_won_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_comp_won_exp = comp_won_expected_prev;
	end
	if (
		( deal_comp_expected_prev !== 1'bx ) && ( deal_comp_prev !== deal_comp_expected_prev )
		&& ((deal_comp_expected_prev !== last_deal_comp_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port deal_comp :: @time = %t",  $realtime);
		$display ("     Expected value = %b", deal_comp_expected_prev);
		$display ("     Real value = %b", deal_comp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_deal_comp_exp = deal_comp_expected_prev;
	end
	if (
		( deal_player_expected_prev !== 1'bx ) && ( deal_player_prev !== deal_player_expected_prev )
		&& ((deal_player_expected_prev !== last_deal_player_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port deal_player :: @time = %t",  $realtime);
		$display ("     Expected value = %b", deal_player_expected_prev);
		$display ("     Real value = %b", deal_player_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_deal_player_exp = deal_player_expected_prev;
	end
	if (
		( player_turn_expected_prev !== 1'bx ) && ( player_turn_prev !== player_turn_expected_prev )
		&& ((player_turn_expected_prev !== last_player_turn_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port player_turn :: @time = %t",  $realtime);
		$display ("     Expected value = %b", player_turn_expected_prev);
		$display ("     Real value = %b", player_turn_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_player_turn_exp = player_turn_expected_prev;
	end
	if (
		( player_won_expected_prev !== 1'bx ) && ( player_won_prev !== player_won_expected_prev )
		&& ((player_won_expected_prev !== last_player_won_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port player_won :: @time = %t",  $realtime);
		$display ("     Expected value = %b", player_won_expected_prev);
		$display ("     Real value = %b", player_won_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_player_won_exp = player_won_expected_prev;
	end
	if (
		( tie_expected_prev !== 1'bx ) && ( tie_prev !== tie_expected_prev )
		&& ((tie_expected_prev !== last_tie_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tie :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tie_expected_prev);
		$display ("     Real value = %b", tie_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_tie_exp = tie_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module g58_sys_ctrl_fsm_test_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg comp_done;
reg [5:0] num_cards_comp;
reg [5:0] num_cards_deck;
reg [5:0] num_cards_player;
reg player_done;
reg rst;
// wires                                               
wire comp_turn;
wire comp_won;
wire deal_comp;
wire deal_player;
wire player_turn;
wire player_won;
wire tie;

wire sampler;                             

// assign statements (if any)                          
g58_sys_ctrl_fsm_test i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.comp_done(comp_done),
	.comp_turn(comp_turn),
	.comp_won(comp_won),
	.deal_comp(deal_comp),
	.deal_player(deal_player),
	.num_cards_comp(num_cards_comp),
	.num_cards_deck(num_cards_deck),
	.num_cards_player(num_cards_player),
	.player_done(player_done),
	.player_turn(player_turn),
	.player_won(player_won),
	.rst(rst),
	.tie(tie)
);

// rst
initial
begin
	rst = 1'b0;
	rst = #20000 1'b1;
	rst = #20000 1'b0;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

// player_done
initial
begin
	player_done = 1'b0;
	player_done = #110000 1'b1;
	player_done = #20000 1'b0;
	player_done = #80000 1'b1;
	player_done = #20000 1'b0;
end 

// comp_done
initial
begin
	comp_done = 1'b0;
	comp_done = #160000 1'b1;
	comp_done = #20000 1'b0;
	comp_done = #80000 1'b1;
	comp_done = #20000 1'b0;
end 
// num_cards_player[ 5 ]
initial
begin
	num_cards_player[5] = 1'b0;
end 
// num_cards_player[ 4 ]
initial
begin
	num_cards_player[4] = 1'b0;
end 
// num_cards_player[ 3 ]
initial
begin
	num_cards_player[3] = 1'b1;
	num_cards_player[3] = #110000 1'b0;
end 
// num_cards_player[ 2 ]
initial
begin
	num_cards_player[2] = 1'b0;
	num_cards_player[2] = #110000 1'b1;
end 
// num_cards_player[ 1 ]
initial
begin
	num_cards_player[1] = 1'b0;
	num_cards_player[1] = #110000 1'b1;
end 
// num_cards_player[ 0 ]
initial
begin
	num_cards_player[0] = 1'b0;
	num_cards_player[0] = #110000 1'b1;
	num_cards_player[0] = #100000 1'b0;
end 
// num_cards_comp[ 5 ]
initial
begin
	num_cards_comp[5] = 1'b0;
end 
// num_cards_comp[ 4 ]
initial
begin
	num_cards_comp[4] = 1'b0;
end 
// num_cards_comp[ 3 ]
initial
begin
	num_cards_comp[3] = 1'b1;
end 
// num_cards_comp[ 2 ]
initial
begin
	num_cards_comp[2] = 1'b0;
end 
// num_cards_comp[ 1 ]
initial
begin
	num_cards_comp[1] = 1'b0;
end 
// num_cards_comp[ 0 ]
initial
begin
	num_cards_comp[0] = 1'b0;
	num_cards_comp[0] = #990000 1'b1;
end 
// num_cards_deck[ 5 ]
initial
begin
	num_cards_deck[5] = 1'b0;
end 
// num_cards_deck[ 4 ]
initial
begin
	num_cards_deck[4] = 1'b0;
end 
// num_cards_deck[ 3 ]
initial
begin
	num_cards_deck[3] = 1'b1;
end 
// num_cards_deck[ 2 ]
initial
begin
	num_cards_deck[2] = 1'b0;
end 
// num_cards_deck[ 1 ]
initial
begin
	num_cards_deck[1] = 1'b0;
end 
// num_cards_deck[ 0 ]
initial
begin
	num_cards_deck[0] = 1'b0;
end 

g58_sys_ctrl_fsm_test_vlg_sample_tst tb_sample (
	.clk(clk),
	.comp_done(comp_done),
	.num_cards_comp(num_cards_comp),
	.num_cards_deck(num_cards_deck),
	.num_cards_player(num_cards_player),
	.player_done(player_done),
	.rst(rst),
	.sampler_tx(sampler)
);

g58_sys_ctrl_fsm_test_vlg_check_tst tb_out(
	.comp_turn(comp_turn),
	.comp_won(comp_won),
	.deal_comp(deal_comp),
	.deal_player(deal_player),
	.player_turn(player_turn),
	.player_won(player_won),
	.tie(tie),
	.sampler_rx(sampler)
);
endmodule

