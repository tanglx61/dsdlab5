// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/06/2017 02:44:35"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    g58_crazy8
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module g58_crazy8_vlg_sample_tst(
	clk,
	down_button,
	draw_button,
	init_button,
	play_button,
	up_button,
	sampler_tx
);
input  clk;
input  down_button;
input  draw_button;
input  init_button;
input  play_button;
input  up_button;
output sampler_tx;

reg sample;
time current_time;
always @(clk or down_button or draw_button or init_button or play_button or up_button)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module g58_crazy8_vlg_check_tst (
	card_dealt,
	card_ready,
	comp_num_cards,
	comp_turn,
	comp_won,
	deal_comp,
	deal_player,
	human_current_card,
	human_num_cards,
	illegal_play,
	player_turn,
	player_won,
	playing_deck_num_cards,
	tie,
	top_card,
	sampler_rx
);
input [5:0] card_dealt;
input  card_ready;
input [5:0] comp_num_cards;
input  comp_turn;
input  comp_won;
input  deal_comp;
input  deal_player;
input [5:0] human_current_card;
input [5:0] human_num_cards;
input  illegal_play;
input  player_turn;
input  player_won;
input [5:0] playing_deck_num_cards;
input  tie;
input [5:0] top_card;
input sampler_rx;

reg [5:0] card_dealt_expected;
reg  card_ready_expected;
reg [5:0] comp_num_cards_expected;
reg  comp_turn_expected;
reg  comp_won_expected;
reg  deal_comp_expected;
reg  deal_player_expected;
reg [5:0] human_current_card_expected;
reg [5:0] human_num_cards_expected;
reg  illegal_play_expected;
reg  player_turn_expected;
reg  player_won_expected;
reg [5:0] playing_deck_num_cards_expected;
reg  tie_expected;
reg [5:0] top_card_expected;

reg [5:0] card_dealt_prev;
reg  card_ready_prev;
reg [5:0] comp_num_cards_prev;
reg  comp_turn_prev;
reg  comp_won_prev;
reg  deal_comp_prev;
reg  deal_player_prev;
reg [5:0] human_current_card_prev;
reg [5:0] human_num_cards_prev;
reg  illegal_play_prev;
reg  player_turn_prev;
reg  player_won_prev;
reg [5:0] playing_deck_num_cards_prev;
reg  tie_prev;
reg [5:0] top_card_prev;

reg [5:0] card_dealt_expected_prev;
reg  card_ready_expected_prev;
reg [5:0] comp_num_cards_expected_prev;
reg  comp_turn_expected_prev;
reg  comp_won_expected_prev;
reg  deal_comp_expected_prev;
reg  deal_player_expected_prev;
reg [5:0] human_current_card_expected_prev;
reg [5:0] human_num_cards_expected_prev;
reg  illegal_play_expected_prev;
reg  player_turn_expected_prev;
reg  player_won_expected_prev;
reg [5:0] playing_deck_num_cards_expected_prev;
reg  tie_expected_prev;
reg [5:0] top_card_expected_prev;

reg [5:0] last_card_dealt_exp;
reg  last_card_ready_exp;
reg [5:0] last_comp_num_cards_exp;
reg  last_comp_turn_exp;
reg  last_comp_won_exp;
reg  last_deal_comp_exp;
reg  last_deal_player_exp;
reg [5:0] last_human_current_card_exp;
reg [5:0] last_human_num_cards_exp;
reg  last_illegal_play_exp;
reg  last_player_turn_exp;
reg  last_player_won_exp;
reg [5:0] last_playing_deck_num_cards_exp;
reg  last_tie_exp;
reg [5:0] last_top_card_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:15] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 15'b1;
end

// update real /o prevs

always @(trigger)
begin
	card_dealt_prev = card_dealt;
	card_ready_prev = card_ready;
	comp_num_cards_prev = comp_num_cards;
	comp_turn_prev = comp_turn;
	comp_won_prev = comp_won;
	deal_comp_prev = deal_comp;
	deal_player_prev = deal_player;
	human_current_card_prev = human_current_card;
	human_num_cards_prev = human_num_cards;
	illegal_play_prev = illegal_play;
	player_turn_prev = player_turn;
	player_won_prev = player_won;
	playing_deck_num_cards_prev = playing_deck_num_cards;
	tie_prev = tie;
	top_card_prev = top_card;
end

// update expected /o prevs

always @(trigger)
begin
	card_dealt_expected_prev = card_dealt_expected;
	card_ready_expected_prev = card_ready_expected;
	comp_num_cards_expected_prev = comp_num_cards_expected;
	comp_turn_expected_prev = comp_turn_expected;
	comp_won_expected_prev = comp_won_expected;
	deal_comp_expected_prev = deal_comp_expected;
	deal_player_expected_prev = deal_player_expected;
	human_current_card_expected_prev = human_current_card_expected;
	human_num_cards_expected_prev = human_num_cards_expected;
	illegal_play_expected_prev = illegal_play_expected;
	player_turn_expected_prev = player_turn_expected;
	player_won_expected_prev = player_won_expected;
	playing_deck_num_cards_expected_prev = playing_deck_num_cards_expected;
	tie_expected_prev = tie_expected;
	top_card_expected_prev = top_card_expected;
end



// expected comp_won
initial
begin
	comp_won_expected = 1'bX;
	comp_won_expected = #999000 1'b0;
end 

// expected player_won
initial
begin
	player_won_expected = 1'bX;
	player_won_expected = #999000 1'b0;
end 

// expected tie
initial
begin
	tie_expected = 1'bX;
	tie_expected = #999000 1'b0;
end 
// expected comp_num_cards[ 5 ]
initial
begin
	comp_num_cards_expected[5] = 1'bX;
	comp_num_cards_expected[5] = #999000 1'b0;
end 
// expected comp_num_cards[ 4 ]
initial
begin
	comp_num_cards_expected[4] = 1'bX;
	comp_num_cards_expected[4] = #999000 1'b0;
end 
// expected comp_num_cards[ 3 ]
initial
begin
	comp_num_cards_expected[3] = 1'bX;
	comp_num_cards_expected[3] = #999000 1'b0;
end 
// expected comp_num_cards[ 2 ]
initial
begin
	comp_num_cards_expected[2] = 1'bX;
	comp_num_cards_expected[2] = #999000 1'b0;
end 
// expected comp_num_cards[ 1 ]
initial
begin
	comp_num_cards_expected[1] = 1'bX;
	comp_num_cards_expected[1] = #999000 1'b0;
end 
// expected comp_num_cards[ 0 ]
initial
begin
	comp_num_cards_expected[0] = 1'bX;
	comp_num_cards_expected[0] = #999000 1'b0;
end 
// expected human_num_cards[ 5 ]
initial
begin
	human_num_cards_expected[5] = 1'bX;
	human_num_cards_expected[5] = #999000 1'b0;
end 
// expected human_num_cards[ 4 ]
initial
begin
	human_num_cards_expected[4] = 1'bX;
	human_num_cards_expected[4] = #999000 1'b0;
end 
// expected human_num_cards[ 3 ]
initial
begin
	human_num_cards_expected[3] = 1'bX;
	human_num_cards_expected[3] = #999000 1'b0;
end 
// expected human_num_cards[ 2 ]
initial
begin
	human_num_cards_expected[2] = 1'bX;
	human_num_cards_expected[2] = #999000 1'b0;
end 
// expected human_num_cards[ 1 ]
initial
begin
	human_num_cards_expected[1] = 1'bX;
	human_num_cards_expected[1] = #999000 1'b0;
end 
// expected human_num_cards[ 0 ]
initial
begin
	human_num_cards_expected[0] = 1'bX;
	human_num_cards_expected[0] = #999000 1'b0;
end 
// expected playing_deck_num_cards[ 5 ]
initial
begin
	playing_deck_num_cards_expected[5] = 1'bX;
	playing_deck_num_cards_expected[5] = #999000 1'b0;
end 
// expected playing_deck_num_cards[ 4 ]
initial
begin
	playing_deck_num_cards_expected[4] = 1'bX;
	playing_deck_num_cards_expected[4] = #999000 1'b0;
end 
// expected playing_deck_num_cards[ 3 ]
initial
begin
	playing_deck_num_cards_expected[3] = 1'bX;
	playing_deck_num_cards_expected[3] = #999000 1'b0;
end 
// expected playing_deck_num_cards[ 2 ]
initial
begin
	playing_deck_num_cards_expected[2] = 1'bX;
	playing_deck_num_cards_expected[2] = #999000 1'b0;
end 
// expected playing_deck_num_cards[ 1 ]
initial
begin
	playing_deck_num_cards_expected[1] = 1'bX;
	playing_deck_num_cards_expected[1] = #999000 1'b0;
end 
// expected playing_deck_num_cards[ 0 ]
initial
begin
	playing_deck_num_cards_expected[0] = 1'bX;
	playing_deck_num_cards_expected[0] = #999000 1'b0;
end 
// expected top_card[ 5 ]
initial
begin
	top_card_expected[5] = 1'bX;
	top_card_expected[5] = #999000 1'b0;
end 
// expected top_card[ 4 ]
initial
begin
	top_card_expected[4] = 1'bX;
	top_card_expected[4] = #999000 1'b0;
end 
// expected top_card[ 3 ]
initial
begin
	top_card_expected[3] = 1'bX;
	top_card_expected[3] = #999000 1'b0;
end 
// expected top_card[ 2 ]
initial
begin
	top_card_expected[2] = 1'bX;
	top_card_expected[2] = #999000 1'b0;
end 
// expected top_card[ 1 ]
initial
begin
	top_card_expected[1] = 1'bX;
	top_card_expected[1] = #999000 1'b0;
end 
// expected top_card[ 0 ]
initial
begin
	top_card_expected[0] = 1'bX;
	top_card_expected[0] = #999000 1'b0;
end 

// expected deal_comp
initial
begin
	deal_comp_expected = 1'bX;
	deal_comp_expected = #999000 1'b0;
end 

// expected deal_player
initial
begin
	deal_player_expected = 1'bX;
	deal_player_expected = #999000 1'b0;
end 

// expected comp_turn
initial
begin
	comp_turn_expected = 1'bX;
	comp_turn_expected = #999000 1'b0;
end 

// expected player_turn
initial
begin
	player_turn_expected = 1'bX;
	player_turn_expected = #999000 1'b0;
end 
// expected card_dealt[ 5 ]
initial
begin
	card_dealt_expected[5] = 1'bX;
	card_dealt_expected[5] = #999000 1'b0;
end 
// expected card_dealt[ 4 ]
initial
begin
	card_dealt_expected[4] = 1'bX;
	card_dealt_expected[4] = #999000 1'b0;
end 
// expected card_dealt[ 3 ]
initial
begin
	card_dealt_expected[3] = 1'bX;
	card_dealt_expected[3] = #999000 1'b0;
end 
// expected card_dealt[ 2 ]
initial
begin
	card_dealt_expected[2] = 1'bX;
	card_dealt_expected[2] = #999000 1'b0;
end 
// expected card_dealt[ 1 ]
initial
begin
	card_dealt_expected[1] = 1'bX;
	card_dealt_expected[1] = #999000 1'b0;
end 
// expected card_dealt[ 0 ]
initial
begin
	card_dealt_expected[0] = 1'bX;
	card_dealt_expected[0] = #999000 1'b0;
end 

// expected card_ready
initial
begin
	card_ready_expected = 1'bX;
	card_ready_expected = #999000 1'b0;
end 
// expected human_current_card[ 5 ]
initial
begin
	human_current_card_expected[5] = 1'bX;
end 
// expected human_current_card[ 4 ]
initial
begin
	human_current_card_expected[4] = 1'bX;
end 
// expected human_current_card[ 3 ]
initial
begin
	human_current_card_expected[3] = 1'bX;
end 
// expected human_current_card[ 2 ]
initial
begin
	human_current_card_expected[2] = 1'bX;
end 
// expected human_current_card[ 1 ]
initial
begin
	human_current_card_expected[1] = 1'bX;
end 
// expected human_current_card[ 0 ]
initial
begin
	human_current_card_expected[0] = 1'bX;
end 

// expected illegal_play
initial
begin
	illegal_play_expected = 1'bX;
end 
// generate trigger
always @(card_dealt_expected or card_dealt or card_ready_expected or card_ready or comp_num_cards_expected or comp_num_cards or comp_turn_expected or comp_turn or comp_won_expected or comp_won or deal_comp_expected or deal_comp or deal_player_expected or deal_player or human_current_card_expected or human_current_card or human_num_cards_expected or human_num_cards or illegal_play_expected or illegal_play or player_turn_expected or player_turn or player_won_expected or player_won or playing_deck_num_cards_expected or playing_deck_num_cards or tie_expected or tie or top_card_expected or top_card)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected card_dealt = %b | expected card_ready = %b | expected comp_num_cards = %b | expected comp_turn = %b | expected comp_won = %b | expected deal_comp = %b | expected deal_player = %b | expected human_current_card = %b | expected human_num_cards = %b | expected illegal_play = %b | expected player_turn = %b | expected player_won = %b | expected playing_deck_num_cards = %b | expected tie = %b | expected top_card = %b | ",card_dealt_expected_prev,card_ready_expected_prev,comp_num_cards_expected_prev,comp_turn_expected_prev,comp_won_expected_prev,deal_comp_expected_prev,deal_player_expected_prev,human_current_card_expected_prev,human_num_cards_expected_prev,illegal_play_expected_prev,player_turn_expected_prev,player_won_expected_prev,playing_deck_num_cards_expected_prev,tie_expected_prev,top_card_expected_prev);
	$display("| real card_dealt = %b | real card_ready = %b | real comp_num_cards = %b | real comp_turn = %b | real comp_won = %b | real deal_comp = %b | real deal_player = %b | real human_current_card = %b | real human_num_cards = %b | real illegal_play = %b | real player_turn = %b | real player_won = %b | real playing_deck_num_cards = %b | real tie = %b | real top_card = %b | ",card_dealt_prev,card_ready_prev,comp_num_cards_prev,comp_turn_prev,comp_won_prev,deal_comp_prev,deal_player_prev,human_current_card_prev,human_num_cards_prev,illegal_play_prev,player_turn_prev,player_won_prev,playing_deck_num_cards_prev,tie_prev,top_card_prev);
`endif
	if (
		( card_dealt_expected_prev[0] !== 1'bx ) && ( card_dealt_prev[0] !== card_dealt_expected_prev[0] )
		&& ((card_dealt_expected_prev[0] !== last_card_dealt_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port card_dealt[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", card_dealt_expected_prev);
		$display ("     Real value = %b", card_dealt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_card_dealt_exp[0] = card_dealt_expected_prev[0];
	end
	if (
		( card_dealt_expected_prev[1] !== 1'bx ) && ( card_dealt_prev[1] !== card_dealt_expected_prev[1] )
		&& ((card_dealt_expected_prev[1] !== last_card_dealt_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port card_dealt[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", card_dealt_expected_prev);
		$display ("     Real value = %b", card_dealt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_card_dealt_exp[1] = card_dealt_expected_prev[1];
	end
	if (
		( card_dealt_expected_prev[2] !== 1'bx ) && ( card_dealt_prev[2] !== card_dealt_expected_prev[2] )
		&& ((card_dealt_expected_prev[2] !== last_card_dealt_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port card_dealt[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", card_dealt_expected_prev);
		$display ("     Real value = %b", card_dealt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_card_dealt_exp[2] = card_dealt_expected_prev[2];
	end
	if (
		( card_dealt_expected_prev[3] !== 1'bx ) && ( card_dealt_prev[3] !== card_dealt_expected_prev[3] )
		&& ((card_dealt_expected_prev[3] !== last_card_dealt_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port card_dealt[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", card_dealt_expected_prev);
		$display ("     Real value = %b", card_dealt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_card_dealt_exp[3] = card_dealt_expected_prev[3];
	end
	if (
		( card_dealt_expected_prev[4] !== 1'bx ) && ( card_dealt_prev[4] !== card_dealt_expected_prev[4] )
		&& ((card_dealt_expected_prev[4] !== last_card_dealt_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port card_dealt[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", card_dealt_expected_prev);
		$display ("     Real value = %b", card_dealt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_card_dealt_exp[4] = card_dealt_expected_prev[4];
	end
	if (
		( card_dealt_expected_prev[5] !== 1'bx ) && ( card_dealt_prev[5] !== card_dealt_expected_prev[5] )
		&& ((card_dealt_expected_prev[5] !== last_card_dealt_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port card_dealt[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", card_dealt_expected_prev);
		$display ("     Real value = %b", card_dealt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_card_dealt_exp[5] = card_dealt_expected_prev[5];
	end
	if (
		( card_ready_expected_prev !== 1'bx ) && ( card_ready_prev !== card_ready_expected_prev )
		&& ((card_ready_expected_prev !== last_card_ready_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port card_ready :: @time = %t",  $realtime);
		$display ("     Expected value = %b", card_ready_expected_prev);
		$display ("     Real value = %b", card_ready_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_card_ready_exp = card_ready_expected_prev;
	end
	if (
		( comp_num_cards_expected_prev[0] !== 1'bx ) && ( comp_num_cards_prev[0] !== comp_num_cards_expected_prev[0] )
		&& ((comp_num_cards_expected_prev[0] !== last_comp_num_cards_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port comp_num_cards[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", comp_num_cards_expected_prev);
		$display ("     Real value = %b", comp_num_cards_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_comp_num_cards_exp[0] = comp_num_cards_expected_prev[0];
	end
	if (
		( comp_num_cards_expected_prev[1] !== 1'bx ) && ( comp_num_cards_prev[1] !== comp_num_cards_expected_prev[1] )
		&& ((comp_num_cards_expected_prev[1] !== last_comp_num_cards_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port comp_num_cards[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", comp_num_cards_expected_prev);
		$display ("     Real value = %b", comp_num_cards_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_comp_num_cards_exp[1] = comp_num_cards_expected_prev[1];
	end
	if (
		( comp_num_cards_expected_prev[2] !== 1'bx ) && ( comp_num_cards_prev[2] !== comp_num_cards_expected_prev[2] )
		&& ((comp_num_cards_expected_prev[2] !== last_comp_num_cards_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port comp_num_cards[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", comp_num_cards_expected_prev);
		$display ("     Real value = %b", comp_num_cards_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_comp_num_cards_exp[2] = comp_num_cards_expected_prev[2];
	end
	if (
		( comp_num_cards_expected_prev[3] !== 1'bx ) && ( comp_num_cards_prev[3] !== comp_num_cards_expected_prev[3] )
		&& ((comp_num_cards_expected_prev[3] !== last_comp_num_cards_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port comp_num_cards[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", comp_num_cards_expected_prev);
		$display ("     Real value = %b", comp_num_cards_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_comp_num_cards_exp[3] = comp_num_cards_expected_prev[3];
	end
	if (
		( comp_num_cards_expected_prev[4] !== 1'bx ) && ( comp_num_cards_prev[4] !== comp_num_cards_expected_prev[4] )
		&& ((comp_num_cards_expected_prev[4] !== last_comp_num_cards_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port comp_num_cards[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", comp_num_cards_expected_prev);
		$display ("     Real value = %b", comp_num_cards_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_comp_num_cards_exp[4] = comp_num_cards_expected_prev[4];
	end
	if (
		( comp_num_cards_expected_prev[5] !== 1'bx ) && ( comp_num_cards_prev[5] !== comp_num_cards_expected_prev[5] )
		&& ((comp_num_cards_expected_prev[5] !== last_comp_num_cards_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port comp_num_cards[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", comp_num_cards_expected_prev);
		$display ("     Real value = %b", comp_num_cards_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_comp_num_cards_exp[5] = comp_num_cards_expected_prev[5];
	end
	if (
		( comp_turn_expected_prev !== 1'bx ) && ( comp_turn_prev !== comp_turn_expected_prev )
		&& ((comp_turn_expected_prev !== last_comp_turn_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port comp_turn :: @time = %t",  $realtime);
		$display ("     Expected value = %b", comp_turn_expected_prev);
		$display ("     Real value = %b", comp_turn_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_comp_turn_exp = comp_turn_expected_prev;
	end
	if (
		( comp_won_expected_prev !== 1'bx ) && ( comp_won_prev !== comp_won_expected_prev )
		&& ((comp_won_expected_prev !== last_comp_won_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port comp_won :: @time = %t",  $realtime);
		$display ("     Expected value = %b", comp_won_expected_prev);
		$display ("     Real value = %b", comp_won_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_comp_won_exp = comp_won_expected_prev;
	end
	if (
		( deal_comp_expected_prev !== 1'bx ) && ( deal_comp_prev !== deal_comp_expected_prev )
		&& ((deal_comp_expected_prev !== last_deal_comp_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port deal_comp :: @time = %t",  $realtime);
		$display ("     Expected value = %b", deal_comp_expected_prev);
		$display ("     Real value = %b", deal_comp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_deal_comp_exp = deal_comp_expected_prev;
	end
	if (
		( deal_player_expected_prev !== 1'bx ) && ( deal_player_prev !== deal_player_expected_prev )
		&& ((deal_player_expected_prev !== last_deal_player_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port deal_player :: @time = %t",  $realtime);
		$display ("     Expected value = %b", deal_player_expected_prev);
		$display ("     Real value = %b", deal_player_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_deal_player_exp = deal_player_expected_prev;
	end
	if (
		( human_current_card_expected_prev[0] !== 1'bx ) && ( human_current_card_prev[0] !== human_current_card_expected_prev[0] )
		&& ((human_current_card_expected_prev[0] !== last_human_current_card_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port human_current_card[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", human_current_card_expected_prev);
		$display ("     Real value = %b", human_current_card_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_human_current_card_exp[0] = human_current_card_expected_prev[0];
	end
	if (
		( human_current_card_expected_prev[1] !== 1'bx ) && ( human_current_card_prev[1] !== human_current_card_expected_prev[1] )
		&& ((human_current_card_expected_prev[1] !== last_human_current_card_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port human_current_card[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", human_current_card_expected_prev);
		$display ("     Real value = %b", human_current_card_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_human_current_card_exp[1] = human_current_card_expected_prev[1];
	end
	if (
		( human_current_card_expected_prev[2] !== 1'bx ) && ( human_current_card_prev[2] !== human_current_card_expected_prev[2] )
		&& ((human_current_card_expected_prev[2] !== last_human_current_card_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port human_current_card[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", human_current_card_expected_prev);
		$display ("     Real value = %b", human_current_card_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_human_current_card_exp[2] = human_current_card_expected_prev[2];
	end
	if (
		( human_current_card_expected_prev[3] !== 1'bx ) && ( human_current_card_prev[3] !== human_current_card_expected_prev[3] )
		&& ((human_current_card_expected_prev[3] !== last_human_current_card_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port human_current_card[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", human_current_card_expected_prev);
		$display ("     Real value = %b", human_current_card_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_human_current_card_exp[3] = human_current_card_expected_prev[3];
	end
	if (
		( human_current_card_expected_prev[4] !== 1'bx ) && ( human_current_card_prev[4] !== human_current_card_expected_prev[4] )
		&& ((human_current_card_expected_prev[4] !== last_human_current_card_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port human_current_card[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", human_current_card_expected_prev);
		$display ("     Real value = %b", human_current_card_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_human_current_card_exp[4] = human_current_card_expected_prev[4];
	end
	if (
		( human_current_card_expected_prev[5] !== 1'bx ) && ( human_current_card_prev[5] !== human_current_card_expected_prev[5] )
		&& ((human_current_card_expected_prev[5] !== last_human_current_card_exp[5]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port human_current_card[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", human_current_card_expected_prev);
		$display ("     Real value = %b", human_current_card_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_human_current_card_exp[5] = human_current_card_expected_prev[5];
	end
	if (
		( human_num_cards_expected_prev[0] !== 1'bx ) && ( human_num_cards_prev[0] !== human_num_cards_expected_prev[0] )
		&& ((human_num_cards_expected_prev[0] !== last_human_num_cards_exp[0]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port human_num_cards[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", human_num_cards_expected_prev);
		$display ("     Real value = %b", human_num_cards_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_human_num_cards_exp[0] = human_num_cards_expected_prev[0];
	end
	if (
		( human_num_cards_expected_prev[1] !== 1'bx ) && ( human_num_cards_prev[1] !== human_num_cards_expected_prev[1] )
		&& ((human_num_cards_expected_prev[1] !== last_human_num_cards_exp[1]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port human_num_cards[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", human_num_cards_expected_prev);
		$display ("     Real value = %b", human_num_cards_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_human_num_cards_exp[1] = human_num_cards_expected_prev[1];
	end
	if (
		( human_num_cards_expected_prev[2] !== 1'bx ) && ( human_num_cards_prev[2] !== human_num_cards_expected_prev[2] )
		&& ((human_num_cards_expected_prev[2] !== last_human_num_cards_exp[2]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port human_num_cards[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", human_num_cards_expected_prev);
		$display ("     Real value = %b", human_num_cards_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_human_num_cards_exp[2] = human_num_cards_expected_prev[2];
	end
	if (
		( human_num_cards_expected_prev[3] !== 1'bx ) && ( human_num_cards_prev[3] !== human_num_cards_expected_prev[3] )
		&& ((human_num_cards_expected_prev[3] !== last_human_num_cards_exp[3]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port human_num_cards[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", human_num_cards_expected_prev);
		$display ("     Real value = %b", human_num_cards_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_human_num_cards_exp[3] = human_num_cards_expected_prev[3];
	end
	if (
		( human_num_cards_expected_prev[4] !== 1'bx ) && ( human_num_cards_prev[4] !== human_num_cards_expected_prev[4] )
		&& ((human_num_cards_expected_prev[4] !== last_human_num_cards_exp[4]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port human_num_cards[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", human_num_cards_expected_prev);
		$display ("     Real value = %b", human_num_cards_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_human_num_cards_exp[4] = human_num_cards_expected_prev[4];
	end
	if (
		( human_num_cards_expected_prev[5] !== 1'bx ) && ( human_num_cards_prev[5] !== human_num_cards_expected_prev[5] )
		&& ((human_num_cards_expected_prev[5] !== last_human_num_cards_exp[5]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port human_num_cards[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", human_num_cards_expected_prev);
		$display ("     Real value = %b", human_num_cards_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_human_num_cards_exp[5] = human_num_cards_expected_prev[5];
	end
	if (
		( illegal_play_expected_prev !== 1'bx ) && ( illegal_play_prev !== illegal_play_expected_prev )
		&& ((illegal_play_expected_prev !== last_illegal_play_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port illegal_play :: @time = %t",  $realtime);
		$display ("     Expected value = %b", illegal_play_expected_prev);
		$display ("     Real value = %b", illegal_play_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_illegal_play_exp = illegal_play_expected_prev;
	end
	if (
		( player_turn_expected_prev !== 1'bx ) && ( player_turn_prev !== player_turn_expected_prev )
		&& ((player_turn_expected_prev !== last_player_turn_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port player_turn :: @time = %t",  $realtime);
		$display ("     Expected value = %b", player_turn_expected_prev);
		$display ("     Real value = %b", player_turn_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_player_turn_exp = player_turn_expected_prev;
	end
	if (
		( player_won_expected_prev !== 1'bx ) && ( player_won_prev !== player_won_expected_prev )
		&& ((player_won_expected_prev !== last_player_won_exp) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port player_won :: @time = %t",  $realtime);
		$display ("     Expected value = %b", player_won_expected_prev);
		$display ("     Real value = %b", player_won_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_player_won_exp = player_won_expected_prev;
	end
	if (
		( playing_deck_num_cards_expected_prev[0] !== 1'bx ) && ( playing_deck_num_cards_prev[0] !== playing_deck_num_cards_expected_prev[0] )
		&& ((playing_deck_num_cards_expected_prev[0] !== last_playing_deck_num_cards_exp[0]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port playing_deck_num_cards[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", playing_deck_num_cards_expected_prev);
		$display ("     Real value = %b", playing_deck_num_cards_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_playing_deck_num_cards_exp[0] = playing_deck_num_cards_expected_prev[0];
	end
	if (
		( playing_deck_num_cards_expected_prev[1] !== 1'bx ) && ( playing_deck_num_cards_prev[1] !== playing_deck_num_cards_expected_prev[1] )
		&& ((playing_deck_num_cards_expected_prev[1] !== last_playing_deck_num_cards_exp[1]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port playing_deck_num_cards[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", playing_deck_num_cards_expected_prev);
		$display ("     Real value = %b", playing_deck_num_cards_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_playing_deck_num_cards_exp[1] = playing_deck_num_cards_expected_prev[1];
	end
	if (
		( playing_deck_num_cards_expected_prev[2] !== 1'bx ) && ( playing_deck_num_cards_prev[2] !== playing_deck_num_cards_expected_prev[2] )
		&& ((playing_deck_num_cards_expected_prev[2] !== last_playing_deck_num_cards_exp[2]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port playing_deck_num_cards[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", playing_deck_num_cards_expected_prev);
		$display ("     Real value = %b", playing_deck_num_cards_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_playing_deck_num_cards_exp[2] = playing_deck_num_cards_expected_prev[2];
	end
	if (
		( playing_deck_num_cards_expected_prev[3] !== 1'bx ) && ( playing_deck_num_cards_prev[3] !== playing_deck_num_cards_expected_prev[3] )
		&& ((playing_deck_num_cards_expected_prev[3] !== last_playing_deck_num_cards_exp[3]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port playing_deck_num_cards[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", playing_deck_num_cards_expected_prev);
		$display ("     Real value = %b", playing_deck_num_cards_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_playing_deck_num_cards_exp[3] = playing_deck_num_cards_expected_prev[3];
	end
	if (
		( playing_deck_num_cards_expected_prev[4] !== 1'bx ) && ( playing_deck_num_cards_prev[4] !== playing_deck_num_cards_expected_prev[4] )
		&& ((playing_deck_num_cards_expected_prev[4] !== last_playing_deck_num_cards_exp[4]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port playing_deck_num_cards[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", playing_deck_num_cards_expected_prev);
		$display ("     Real value = %b", playing_deck_num_cards_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_playing_deck_num_cards_exp[4] = playing_deck_num_cards_expected_prev[4];
	end
	if (
		( playing_deck_num_cards_expected_prev[5] !== 1'bx ) && ( playing_deck_num_cards_prev[5] !== playing_deck_num_cards_expected_prev[5] )
		&& ((playing_deck_num_cards_expected_prev[5] !== last_playing_deck_num_cards_exp[5]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port playing_deck_num_cards[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", playing_deck_num_cards_expected_prev);
		$display ("     Real value = %b", playing_deck_num_cards_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_playing_deck_num_cards_exp[5] = playing_deck_num_cards_expected_prev[5];
	end
	if (
		( tie_expected_prev !== 1'bx ) && ( tie_prev !== tie_expected_prev )
		&& ((tie_expected_prev !== last_tie_exp) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tie :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tie_expected_prev);
		$display ("     Real value = %b", tie_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_tie_exp = tie_expected_prev;
	end
	if (
		( top_card_expected_prev[0] !== 1'bx ) && ( top_card_prev[0] !== top_card_expected_prev[0] )
		&& ((top_card_expected_prev[0] !== last_top_card_exp[0]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port top_card[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", top_card_expected_prev);
		$display ("     Real value = %b", top_card_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_top_card_exp[0] = top_card_expected_prev[0];
	end
	if (
		( top_card_expected_prev[1] !== 1'bx ) && ( top_card_prev[1] !== top_card_expected_prev[1] )
		&& ((top_card_expected_prev[1] !== last_top_card_exp[1]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port top_card[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", top_card_expected_prev);
		$display ("     Real value = %b", top_card_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_top_card_exp[1] = top_card_expected_prev[1];
	end
	if (
		( top_card_expected_prev[2] !== 1'bx ) && ( top_card_prev[2] !== top_card_expected_prev[2] )
		&& ((top_card_expected_prev[2] !== last_top_card_exp[2]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port top_card[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", top_card_expected_prev);
		$display ("     Real value = %b", top_card_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_top_card_exp[2] = top_card_expected_prev[2];
	end
	if (
		( top_card_expected_prev[3] !== 1'bx ) && ( top_card_prev[3] !== top_card_expected_prev[3] )
		&& ((top_card_expected_prev[3] !== last_top_card_exp[3]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port top_card[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", top_card_expected_prev);
		$display ("     Real value = %b", top_card_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_top_card_exp[3] = top_card_expected_prev[3];
	end
	if (
		( top_card_expected_prev[4] !== 1'bx ) && ( top_card_prev[4] !== top_card_expected_prev[4] )
		&& ((top_card_expected_prev[4] !== last_top_card_exp[4]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port top_card[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", top_card_expected_prev);
		$display ("     Real value = %b", top_card_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_top_card_exp[4] = top_card_expected_prev[4];
	end
	if (
		( top_card_expected_prev[5] !== 1'bx ) && ( top_card_prev[5] !== top_card_expected_prev[5] )
		&& ((top_card_expected_prev[5] !== last_top_card_exp[5]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port top_card[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", top_card_expected_prev);
		$display ("     Real value = %b", top_card_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_top_card_exp[5] = top_card_expected_prev[5];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#10000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module g58_crazy8_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg down_button;
reg draw_button;
reg init_button;
reg play_button;
reg up_button;
// wires                                               
wire [5:0] card_dealt;
wire card_ready;
wire [5:0] comp_num_cards;
wire comp_turn;
wire comp_won;
wire deal_comp;
wire deal_player;
wire [5:0] human_current_card;
wire [5:0] human_num_cards;
wire illegal_play;
wire player_turn;
wire player_won;
wire [5:0] playing_deck_num_cards;
wire tie;
wire [5:0] top_card;

wire sampler;                             

// assign statements (if any)                          
g58_crazy8 i1 (
// port map - connection between master ports and signals/registers   
	.card_dealt(card_dealt),
	.card_ready(card_ready),
	.clk(clk),
	.comp_num_cards(comp_num_cards),
	.comp_turn(comp_turn),
	.comp_won(comp_won),
	.deal_comp(deal_comp),
	.deal_player(deal_player),
	.down_button(down_button),
	.draw_button(draw_button),
	.human_current_card(human_current_card),
	.human_num_cards(human_num_cards),
	.illegal_play(illegal_play),
	.init_button(init_button),
	.play_button(play_button),
	.player_turn(player_turn),
	.player_won(player_won),
	.playing_deck_num_cards(playing_deck_num_cards),
	.tie(tie),
	.top_card(top_card),
	.up_button(up_button)
);

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

// down_button
initial
begin
	down_button = 1'b0;
end 

// draw_button
initial
begin
	draw_button = 1'b0;
end 

// init_button
initial
begin
	init_button = 1'b0;
	init_button = #30000 1'b1;
	init_button = #100000 1'b0;
end 

// play_button
initial
begin
	play_button = 1'b0;
end 

// up_button
initial
begin
	up_button = 1'b0;
end 

g58_crazy8_vlg_sample_tst tb_sample (
	.clk(clk),
	.down_button(down_button),
	.draw_button(draw_button),
	.init_button(init_button),
	.play_button(play_button),
	.up_button(up_button),
	.sampler_tx(sampler)
);

g58_crazy8_vlg_check_tst tb_out(
	.card_dealt(card_dealt),
	.card_ready(card_ready),
	.comp_num_cards(comp_num_cards),
	.comp_turn(comp_turn),
	.comp_won(comp_won),
	.deal_comp(deal_comp),
	.deal_player(deal_player),
	.human_current_card(human_current_card),
	.human_num_cards(human_num_cards),
	.illegal_play(illegal_play),
	.player_turn(player_turn),
	.player_won(player_won),
	.playing_deck_num_cards(playing_deck_num_cards),
	.tie(tie),
	.top_card(top_card),
	.sampler_rx(sampler)
);
endmodule

